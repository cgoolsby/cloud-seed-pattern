# Comprehensive Supabase Helm Values
# This file contains all necessary configurations for Supabase services

# Global configuration
global:
  postgresqlEnabled: true
  
# JWT Configuration from External Secrets
jwt:
  existingSecret: supabase-jwt

# Database Configuration
db:
  enabled: true
  image:
    repository: supabase/postgres
    tag: "15.8.1.060"
  persistence:
    enabled: true
    size: 20Gi
    storageClass: ebs-sc
  auth:
    existingSecret: supabase-db
    secretKeys:
      adminPasswordKey: password
      userPasswordKey: password
  
  # Database initialization
  initdbScripts:
    db-init.sql: |
      -- This will be replaced by the ConfigMap mount
  
  volumeMounts:
    - name: db-init
      mountPath: /docker-entrypoint-initdb.d
  
  volumes:
    - name: db-init
      configMap:
        name: supabase-db-init
  
  postgresqlDatabase: postgres
  postgresqlUsername: supabase_admin
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "2Gi"
      cpu: "2"

# Studio Configuration
studio:
  enabled: true
  replicas: 2
  image:
    repository: supabase/studio
    tag: "2025.06.02-sha-8f2993d"
  environment:
    STUDIO_PG_META_URL: "http://supabase-supabase-meta:8080"
    POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    DEFAULT_ORGANIZATION_NAME: "Default Organization"
    DEFAULT_PROJECT_NAME: "Default Project"
    SUPABASE_URL: "http://supabase-supabase-kong:8000"
    SUPABASE_PUBLIC_URL: "https://supabase.${DOMAIN_NAME}"
    SUPABASE_ANON_KEY: "${ANON_KEY}"
    SUPABASE_SERVICE_KEY: "${SERVICE_KEY}"
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  auth:
    enabled: true
    existingSecret: supabase-dashboard
    secretKeys:
      usernameKey: username
      passwordKey: password

# Auth Service Configuration
auth:
  enabled: true
  replicas: 2
  image:
    repository: supabase/gotrue
    tag: "v2.174.0"
  environment:
    # Database configuration
    GOTRUE_DB_DRIVER: postgres
    DB_HOST: supabase-supabase-db
    DB_PORT: "5432"
    DB_USER: supabase_auth_admin
    DB_PASSWORD: "${POSTGRES_PASSWORD}"
    DB_DATABASE: postgres
    DB_SSL: "disable"
    
    # GoTrue configuration
    GOTRUE_API_HOST: "0.0.0.0"
    GOTRUE_API_PORT: "9999"
    GOTRUE_SITE_URL: "https://supabase.${DOMAIN_NAME}"
    GOTRUE_URI_ALLOW_LIST: "*"
    GOTRUE_DISABLE_SIGNUP: "false"
    
    # JWT Configuration
    GOTRUE_JWT_ADMIN_ROLES: "service_role"
    GOTRUE_JWT_AUD: "authenticated"
    GOTRUE_JWT_DEFAULT_GROUP_NAME: "authenticated"
    GOTRUE_JWT_EXP: "3600"
    
    # External providers (disabled by default)
    GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
    GOTRUE_EXTERNAL_PHONE_ENABLED: "true"
    
    # Email configuration
    GOTRUE_SMTP_ADMIN_EMAIL: "${SMTP_FROM}"
    GOTRUE_MAILER_AUTOCONFIRM: "false"
    GOTRUE_MAILER_URLPATHS_INVITE: "/auth/v1/verify"
    GOTRUE_MAILER_URLPATHS_CONFIRMATION: "/auth/v1/verify"
    GOTRUE_MAILER_URLPATHS_RECOVERY: "/auth/v1/verify"
    GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "/auth/v1/verify"
  
  smtp:
    existingSecret: supabase-smtp
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "1"

# REST Service Configuration
rest:
  enabled: true
  replicas: 3
  image:
    repository: postgrest/postgrest
    tag: "v12.2.12"
  environment:
    PGRST_APP_SETTINGS_JWT_SECRET: "${JWT_SECRET}"
    PGRST_APP_SETTINGS_JWT_EXP: "3600"
    PGRST_DB_URI: "postgres://authenticator:${POSTGRES_PASSWORD}@supabase-supabase-db:5432/postgres"
    PGRST_DB_SCHEMAS: "public,storage,extensions"
    PGRST_DB_ANON_ROLE: "anon"
    PGRST_DB_USE_LEGACY_GUCS: "false"
    PGRST_APP_SETTINGS_ROLE_CLAIM_KEY: ".role"
    PGRST_MAX_ROWS: "1000"
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "2"

# Realtime Service Configuration
realtime:
  enabled: true
  replicas: 2
  image:
    repository: supabase/realtime
    tag: "v2.34.47"
  environment:
    PORT: "4000"
    DB_HOST: supabase-supabase-db
    DB_PORT: "5432"
    DB_USER: supabase_admin
    DB_PASSWORD: "${POSTGRES_PASSWORD}"
    DB_NAME: postgres
    DB_SSL: "false"
    DB_AFTER_CONNECT_QUERY: "SET search_path TO public, extensions"
    SECRET_KEY_BASE: "${JWT_SECRET}"
    JWT_SECRET: "${JWT_SECRET}"
    REPLICATION_MODE: "RLS"
    REPLICATION_POLL_INTERVAL: "100"
    SECURE_CHANNELS: "true"
    SLOT_NAME: "supabase_realtime_rls"
    TEMPORARY_SLOT: "true"
    APP_NAME: "supabase_realtime"
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "2"

# Storage Service Configuration
storage:
  enabled: true
  replicas: 2
  image:
    repository: supabase/storage-api
    tag: "v1.23.0"
  environment:
    ANON_KEY: "${ANON_KEY}"
    SERVICE_KEY: "${SERVICE_KEY}"
    JWT_SECRET: "${JWT_SECRET}"
    DATABASE_URL: "postgres://supabase_storage_admin:${POSTGRES_PASSWORD}@supabase-supabase-db:5432/postgres"
    FILE_SIZE_LIMIT: "52428800"
    STORAGE_BACKEND: "file"
    FILE_STORAGE_BACKEND_PATH: "/var/lib/storage"
    TENANT_ID: "stub"
    REGION: "us-east-1"
    POSTGREST_URL: "http://supabase-supabase-rest:3000"
  
  persistence:
    enabled: true
    size: 50Gi
    storageClass: ebs-sc
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "2"

# Kong API Gateway Configuration
kong:
  enabled: true
  replicas: 3
  image:
    repository: kong
    tag: "2.8.1"
  environment:
    KONG_DATABASE: "off"
    KONG_DECLARATIVE_CONFIG: "/home/kong/kong.yml"
    KONG_DNS_ORDER: "LAST,A,CNAME"
    KONG_PLUGINS: "request-transformer,cors,key-auth,acl"
    KONG_NGINX_PROXY_LARGE_CLIENT_HEADER_BUFFERS: "4 64k"
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "4"
  
  ingress:
    enabled: true
    className: alb
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/backend-protocol: HTTP
      alb.ingress.kubernetes.io/healthcheck-path: /health
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/ssl-redirect: '443'
      alb.ingress.kubernetes.io/certificate-arn: "${ACM_CERTIFICATE_ARN}"
    tls:
      - hosts:
          - supabase.${DOMAIN_NAME}
    hosts:
      - host: supabase.${DOMAIN_NAME}
        paths:
          - path: /
            pathType: Prefix

# Meta Service Configuration
meta:
  enabled: true
  replicas: 2
  image:
    repository: supabase/postgres-meta
    tag: "v0.89.3"
  environment:
    PG_META_PORT: "8080"
    PG_META_DB_HOST: supabase-supabase-db
    PG_META_DB_PORT: "5432"
    PG_META_DB_NAME: postgres
    PG_META_DB_USER: postgres
    PG_META_DB_PASSWORD: "${POSTGRES_PASSWORD}"
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "500m"

# Functions Service Configuration
functions:
  enabled: false  # Enable when needed
  
# Analytics Configuration
analytics:
  enabled: false  # Enable when needed with proper API keys

# Vector Configuration for logging
vector:
  enabled: true
  image:
    repository: timberio/vector
    tag: "0.28.1-alpine"
  configuration: |
    [sources.kong_logs]
    type = "docker_logs"
    include_containers = ["supabase-kong"]
    
    [sources.auth_logs]
    type = "docker_logs"
    include_containers = ["supabase-auth"]
    
    [sinks.stdout]
    type = "console"
    inputs = ["kong_logs", "auth_logs"]
    encoding.codec = "json"
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "500m"

# MinIO Configuration (disabled - using file storage)
minio:
  enabled: false

# Image proxy configuration
imgproxy:
  enabled: true
  image:
    repository: darthsim/imgproxy
    tag: "v3.8.0"
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ebs-sc
  environment:
    IMGPROXY_BASE_URL: "local://"
    IMGPROXY_LOCAL_FILESYSTEM_ROOT: "/var/lib/imgproxy"