apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: supabase
  namespace: supabase
spec:
  interval: 15m
  chart:
    spec:
      chart: ./charts/supabase
      #TODO : why are we using GitRepository here instead of HelmRepository
      # Is GitRepository pattern actually better because it sidesteps the need for a helm repository? you can just use the path to chart in git?
      sourceRef:
        kind: GitRepository
        name: supabase-community
        namespace: flux-system
  values:
    # JWT Configuration from External Secrets
    jwt:
      existingSecret: supabase-jwt

    # Database Configuration
    db:
      enabled: true
      image:
        tag: "15.1.0.147"
      persistence:
        enabled: true
        size: 20Gi
        storageClass: ebs-sc
      auth:
        existingSecret: supabase-db
        secretKeys:
          adminPasswordKey: password
          userPasswordKey: password
      resources:
        requests:
          memory: "256Mi"
          cpu: "250m"
        limits:
          memory: "2Gi"
          cpu: "2"
      # Remove the ConfigMap reference since we're using inline scripts
      # initdbScriptsConfigMap: supabase-db-init
      initdbScripts:
        00-initial-setup.sql: |
          -- Create required roles with proper error handling
          DO $$ 
          BEGIN
            -- Create anon role
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'anon') THEN
              CREATE ROLE anon NOLOGIN NOINHERIT;
            END IF;
            
            -- Create authenticated role
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'authenticated') THEN
              CREATE ROLE authenticated NOLOGIN NOINHERIT;
            END IF;
            
            -- Create service_role
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'service_role') THEN
              CREATE ROLE service_role NOLOGIN NOINHERIT BYPASSRLS;
            END IF;
            
            -- Create supabase_auth_admin
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'supabase_auth_admin') THEN
              CREATE ROLE supabase_auth_admin LOGIN NOINHERIT;
            END IF;
            
            -- Create supabase_storage_admin
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'supabase_storage_admin') THEN
              CREATE ROLE supabase_storage_admin LOGIN NOINHERIT;
            END IF;
            
            -- Create authenticator
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'authenticator') THEN
              CREATE ROLE authenticator NOINHERIT LOGIN;
            END IF;
            
            -- Create supabase_admin if doesn't exist
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'supabase_admin') THEN
              CREATE ROLE supabase_admin LOGIN CREATEDB CREATEROLE;
            END IF;
          END $$;
          
          -- Grant permissions to authenticator
          GRANT anon TO authenticator;
          GRANT authenticated TO authenticator;
          GRANT service_role TO authenticator;
          GRANT supabase_auth_admin TO authenticator;
          GRANT supabase_storage_admin TO authenticator;
          
          -- Grant admin permissions to supabase_admin
          GRANT supabase_auth_admin TO supabase_admin;
          GRANT supabase_storage_admin TO supabase_admin;
          
          -- Create schemas
          CREATE SCHEMA IF NOT EXISTS _realtime;
          GRANT ALL ON SCHEMA _realtime TO supabase_admin;
          
          -- Grant database permissions
          GRANT ALL PRIVILEGES ON DATABASE postgres TO supabase_storage_admin;
          
          -- Set passwords for all roles using the same password as postgres
          DO $$
          DECLARE
            pwd text;
          BEGIN
            -- Get the password from environment or use a default
            pwd := current_setting('POSTGRES_PASSWORD', true);
            IF pwd IS NULL THEN
              pwd := 'postgres'; -- This should be overridden by the actual password
            END IF;
            
            -- Set passwords for all roles
            EXECUTE format('ALTER ROLE authenticator WITH PASSWORD %L', pwd);
            EXECUTE format('ALTER ROLE supabase_auth_admin WITH PASSWORD %L', pwd);
            EXECUTE format('ALTER ROLE supabase_storage_admin WITH PASSWORD %L', pwd);
            EXECUTE format('ALTER ROLE supabase_admin WITH PASSWORD %L', pwd);
          END $$;

    # Studio Configuration
    studio:
      enabled: true
      replicas: 2
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 5
        targetCPUUtilizationPercentage: 80
      resources:
        requests:
          memory: "256Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "500m"
      auth:
        enabled: true
        existingSecret: supabase-dashboard
        secretKeys:
          usernameKey: username
          passwordKey: password

    # Auth Service Configuration
    auth:
      enabled: true
      replicas: 2
      image:
        repository: supabase/gotrue
        tag: "v2.174.0"
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 10
        targetCPUUtilizationPercentage: 70
      resources:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "1"
      # SMTP disabled due to helm chart bug with literal string values
      # smtp:
      #   existingSecret: supabase-smtp
      environment:
        GOTRUE_SMTP_ADMIN_EMAIL: "noreply@${DOMAIN_NAME}"
        GOTRUE_SMTP_SENDER_NAME: "Supabase"
        # Disable SMTP temporarily
        GOTRUE_SMTP_HOST: ""
        GOTRUE_SMTP_PORT: "0"
        GOTRUE_MAILER_AUTOCONFIRM: "true"
      envFrom:
        - secretRef:
            name: supabase-env-secrets
        - configMapRef:
            name: supabase-env-config

    # REST Service Configuration
    rest:
      enabled: true
      replicas: 3
      image:
        repository: postgrest/postgrest
        tag: "v12.2.12"
      autoscaling:
        enabled: true
        minReplicas: 3
        maxReplicas: 20
        targetCPUUtilizationPercentage: 70
      resources:
        requests:
          memory: "256Mi"
          cpu: "200m"
        limits:
          memory: "1Gi"
          cpu: "2"
      envFrom:
        - secretRef:
            name: supabase-env-secrets
        - configMapRef:
            name: supabase-env-config

    # Realtime Service Configuration
    realtime:
      enabled: true
      replicas: 2
      image:
        repository: supabase/realtime
        tag: "v2.34.47"
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 10
        targetCPUUtilizationPercentage: 70
      resources:
        requests:
          memory: "256Mi"
          cpu: "200m"
        limits:
          memory: "1Gi"
          cpu: "2"
      envFrom:
        - secretRef:
            name: supabase-env-secrets
        - configMapRef:
            name: supabase-env-config
      environment:
        APP_NAME: "supabase_realtime"
        TENANT_ID: "stub"
        REGION: "us-east-1"

    # Storage Service Configuration
    storage:
      enabled: true
      replicas: 2
      image:
        repository: supabase/storage-api
        tag: "v1.23.0"
      persistence:
        enabled: true
        size: 50Gi
        storageClass: ebs-sc
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 10
        targetCPUUtilizationPercentage: 80
      resources:
        requests:
          memory: "256Mi"
          cpu: "200m"
        limits:
          memory: "1Gi"
          cpu: "2"
      envFrom:
        - secretRef:
            name: supabase-env-secrets
        - configMapRef:
            name: supabase-env-config

    # Kong API Gateway Configuration
    kong:
      enabled: true
      replicas: 3
      autoscaling:
        enabled: true
        minReplicas: 3
        maxReplicas: 20
        targetCPUUtilizationPercentage: 70
      resources:
        requests:
          memory: "512Mi"
          cpu: "500m"
        limits:
          memory: "2Gi"
          cpu: "4"
      ingress:
        enabled: true
        className: alb
        annotations:
          alb.ingress.kubernetes.io/scheme: internet-facing
          alb.ingress.kubernetes.io/target-type: ip
          alb.ingress.kubernetes.io/backend-protocol: HTTP
          alb.ingress.kubernetes.io/healthcheck-path: /health
          alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
          alb.ingress.kubernetes.io/ssl-redirect: '443'
          alb.ingress.kubernetes.io/certificate-arn: "${ACM_CERTIFICATE_ARN}"
        tls:
          - hosts:
              - supabase.${DOMAIN_NAME}
        hosts:
          - host: supabase.${DOMAIN_NAME}
            paths:
              - path: /
                pathType: Prefix

    # Meta Service Configuration
    meta:
      enabled: true
      replicas: 2
      image:
        repository: supabase/postgres-meta
        tag: "v0.89.3"
      resources:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "256Mi"
          cpu: "500m"

    # Functions Service Configuration
    functions:
      enabled: false  # Enable when needed
      
    # Analytics Configuration
    analytics:
      enabled: false  # Enable when needed with proper API keys

    # Vector Configuration for logging
    vector:
      enabled: false  # Disabled due to configuration issues
      image:
        repository: timberio/vector
        tag: "0.28.1-alpine"
      resources:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "256Mi"
          cpu: "500m"
      existingConfigmap: vector-config

    # MinIO Configuration (using S3 instead)
    minio:
      enabled: false

    # Global configuration
    global:
      postgresqlEnabled: true
